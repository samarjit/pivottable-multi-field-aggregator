{"version":3,"sources":["/source/d3_renderers.coffee"],"names":[],"mappings":"CAAA,WAAA,GAAA,IAAA,EAAiB,SAAC,GACd,MAAqB,gBAAX,UAAyC,gBAAV,QACrC,EAAY,QAAQ,WACC,kBAAV,SAAyB,OAAO,IAC3C,QAAQ,UAAW,GAGnB,EAAY,UAEL,SAAC,SAEZ,GAAE,eAAe,cAAe,QAAS,SAAC,EAAW,GACjD,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAsBA,KAtBA,GACI,kBAEJ,EAAO,EAAE,OAAO,EAAU,GAG1B,EAAS,EAAE,SAAS,KAAI,MAAO,OAAQ,OAAQ,SAE/C,GAAO,KAAM,MAAO,aACpB,EAAY,SAAC,EAAM,EAAM,GACrB,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,CAAA,IAAkB,IAAf,EAAK,OAEJ,YADA,EAAK,MAAQ,EAIjB,wBAFA,EAAK,aACL,EAAI,EAAK,QACT,EAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,cAAgC,EAAM,OAAQ,EAE1C,WADA,GAAU,EAAO,EAAM,SAE3B,IAAW,KAAM,GACjB,EAAU,EAAU,EAAM,GAC1B,EAAK,SAAS,KAAK,IAEvB,EAAA,EAAA,aAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,WACI,EAAQ,EAAU,cAAc,MAAY,QACzC,MAAA,GACC,EAAU,EAAM,EAAQ,EAgChC,OA9BA,GAAQ,GAAG,MAAM,aACjB,EAAQ,EAAE,QAAQ,QAAU,IAC5B,EAAS,EAAE,QAAQ,SAAW,IAC9B,EAAS,GAET,EAAU,GAAG,OAAO,UACf,MAAM,EAAO,IACb,QAAO,GACP,MAAO,SAAC,SAAM,GAAE,OAErB,GAAG,OAAO,EAAO,IACZ,OAAO,OACH,MAAM,WAAY,YAClB,MAAM,QAAU,EAAe,EAAP,EAAY,MACpC,MAAM,SAAW,EAAgB,EAAP,EAAY,MACtC,MAAM,OAAQ,EAAS,MACvB,MAAM,MAAO,EAAS,MAC1B,MAAM,GAAM,UAAU,SAClB,KAAK,EAAQ,SAAS,GAAG,EAAE,EAAE,IAAI,MAAO,SAAC,SAAM,GAAE,QAAQ,OAC7D,QAAQ,OAAO,OACf,KAAK,QAAS,QACd,MAAM,aAAc,SAAC,GAAM,MAAG,OAAA,EAAA,SAAiB,YAAiB,EAAM,EAAE,QACxE,KAAM,SAAC,SAAM,GAAE,OACf,KAAK,WACE,KAAK,MAAM,OAAS,SAAC,SAAM,GAAE,EAAE,OAC1B,MAAM,MAAS,SAAC,SAAM,GAAE,EAAE,OAC1B,MAAM,QAAS,SAAC,SAAM,MAAK,IAAI,EAAG,EAAE,GAAK,GAAG,OAC5C,MAAM,SAAS,SAAC,SAAM,MAAK,IAAI,EAAG,EAAE,GAAK,GAAG,SAGtD","file":"d3_renderers.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\r\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\r\n        pivotModule require(\"jquery\")\r\n    else if typeof define is \"function\" and define.amd # AMD\r\n        define [\"jquery\"], pivotModule\r\n    # Plain browser env\r\n    else\r\n        pivotModule jQuery\r\n        \r\ncallWithJQuery ($) ->\r\n\r\n    $.pivotUtilities.d3_renderers = Treemap: (pivotData, opts) ->\r\n        defaults =\r\n            localeStrings: {}\r\n\r\n        opts = $.extend defaults, opts\r\n\r\n\r\n        result = $(\"<div>\").css(width: \"100%\", height: \"100%\")\r\n\r\n        tree = name: \"All\", children: []\r\n        addToTree = (tree, path, value) ->\r\n            if path.length == 0\r\n                tree.value = value\r\n                return\r\n            tree.children ?= []\r\n            x = path.shift()\r\n            for child in tree.children when child.name == x\r\n                addToTree(child, path, value)\r\n                return\r\n            newChild = name: x\r\n            addToTree(newChild, path, value)\r\n            tree.children.push newChild\r\n\r\n        for rowKey in pivotData.getRowKeys()\r\n            value = pivotData.getAggregator(rowKey, []).value()\r\n            if value?\r\n                addToTree(tree, rowKey, value)\r\n\r\n        color = d3.scale.category10()\r\n        width = $(window).width() / 1.4\r\n        height = $(window).height() / 1.4\r\n        margin = 10\r\n\r\n        treemap = d3.layout.treemap()\r\n            .size([width, height])\r\n            .sticky(true)\r\n            .value( (d) -> d.size )\r\n\r\n        d3.select(result[0])\r\n            .append(\"div\")\r\n                .style(\"position\", \"relative\")\r\n                .style(\"width\", (width + margin*2) + \"px\")\r\n                .style(\"height\", (height + margin*2) + \"px\")\r\n                .style(\"left\", margin + \"px\")\r\n                .style(\"top\", margin + \"px\")\r\n            .datum(tree).selectAll(\".node\")\r\n                .data(treemap.padding([15,0,0,0]).value( (d) -> d.value ).nodes)\r\n            .enter().append(\"div\")\r\n            .attr(\"class\", \"node\")\r\n            .style(\"background\", (d) -> if d.children? then \"lightgrey\" else color(d.name) )\r\n            .text( (d) -> d.name )\r\n            .call ->\r\n                    this.style(\"left\",  (d) -> d.x+\"px\" )\r\n                        .style(\"top\",   (d) -> d.y+\"px\" )\r\n                        .style(\"width\", (d) -> Math.max(0, d.dx - 1)+\"px\" )\r\n                        .style(\"height\",(d) -> Math.max(0, d.dy - 1)+\"px\" )\r\n                    return\r\n        \r\n        return result\r\n    \r\n\r\n\r\n"],"sourceRoot":"/source/"}