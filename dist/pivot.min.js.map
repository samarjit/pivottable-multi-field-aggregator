{"version":3,"sources":["/source/pivot.coffee"],"names":[],"mappings":"CAAA,WAAA,GAAA,GAAA,KAAA,SAAA,SAAA,GAAA,IAAA,GAAA,GAAA,EAAA,EAAA,KAAA,OAAA,EAAA,EAAA,IAAA,GAAA,IAAA,OAAA,KAAA,KAAA,EAAA,MAAA,EAAA,OAAA,oGAAA,EAAiB,SAAC,GACd,MAAqB,gBAAX,UAAyC,gBAAV,QACrC,EAAY,QAAQ,WACC,kBAAV,SAAyB,OAAO,IAC3C,QAAQ,UAAW,GAGnB,EAAY,UAEL,SAAC,GAEZ,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAIA,GAAgB,SAAC,EAAM,EAAc,GACjC,GAAA,GAAA,EAAA,EAAA,CAKiD,KALjD,GAAQ,GACR,EAAI,EAAK,MAAM,KACf,EAAK,EAAE,GACP,EAAQ,EAAE,OAAS,EAAQ,EAAa,EAAE,GAAQ,GAClD,EAAM,eACiD,EAAI,KAAK,IAAhE,EAAK,EAAG,QAAQ,EAAK,KAAO,EAAe,KAC3C,OAAO,GAAK,GAEhB,EAAe,SAAC,GACZ,GAAA,SAAA,IACI,mBAAoB,EAAG,OAAQ,EAC/B,aAAc,IAAK,WAAY,IAC/B,OAAQ,GAAI,OAAQ,GACpB,UAAU,GACd,EAAO,EAAE,OAAO,EAAU,GAC1B,SAAC,GACG,GAAA,EAAA,OAAa,OAAM,KAAU,SAAS,GAA/B,GACW,IAAL,GAAe,EAAK,UACjC,EAAS,GAAe,EAAK,OAAO,GAAG,QAAQ,EAAK,oBAAqB,EAAK,aAAc,EAAK,YAC1F,GAAG,EAAK,OAAO,EAAO,EAAK,QAF3B,KAKf,EAAQ,IACR,EAAW,GAAa,mBAAoB,IAC5C,EAAW,GAAa,mBAAmB,EAAG,OAAQ,IAAK,OAAQ,MAEnE,GACI,MAAO,SAAC,oBAAA,EAAU,GAAa,iBAAM,mBACjC,MAAO,EACP,KAAO,iBAAG,MAAC,SACX,MAAO,iBAAG,MAAC,OACX,OAAQ,MAEZ,YAAa,SAAC,oBAAA,EAAU,GAAa,SAAC,GAAW,GAAA,SAAV,GAAD,EAAA,GAAW,kBAC7C,QACA,KAAM,SAAC,GAAW,GAAA,EAAA,OAAA,GAA4B,EAAO,GAAP,EAAA,KAAoB,KAAC,KAArB,GAAA,EAA5B,KAAC,KAAK,KAAK,EAAO,IAAlB,QAClB,MAAO,iBAAG,MAAC,KAAK,QAChB,OAAQ,EACR,UAAc,MAAA,EAAW,EAAO,MAEpC,WAAY,SAAC,SAAQ,UAAC,GAAW,GAAA,SAAV,GAAD,EAAA,GAAW,kBAC7B,QACA,KAAM,SAAC,GAAW,GAAA,EAAA,OAAA,GAA4B,EAAO,GAAP,EAAA,KAAoB,KAAC,KAArB,GAAA,EAA5B,KAAC,KAAK,KAAK,EAAO,IAAlB,QAClB,MAAO,iBAAG,MAAC,KAAK,KAAK,IACrB,OAAQ,SAAC,SAAM,IACf,UAAc,MAAA,EAAW,EAAO,MAEpC,IAAK,SAAC,oBAAA,EAAU,GAAU,SAAC,GAAW,GAAA,SAAV,GAAD,EAAA,GAAW,kBAClC,IAAK,EACL,KAAM,SAAC,GAAW,MAAwC,OAAM,WAAW,EAAO,KAAhE,OAAA,KAAC,KAAO,WAAW,EAAO,KAC5C,MAAO,iBAAG,MAAC,KACX,OAAQ,EACR,UAAc,MAAA,EAAW,EAAO,MAEpC,MAAO,SAAC,oBAAA,EAAU,GAAa,SAAC,SAAS,YACnC,GAAA,GAAA,CAGA,KAHA,KACA,EAAK,EAEC,EAAK,EAAK,QACd,EAAa,EAAK,IAAO,EACzB,WACF,KAAM,SAAC,GAGL,IAFA,EAAK,EAEC,EAAK,EAAK,QACgD,MAAM,WAAW,EAAO,EAAK,QAA3F,EAAa,EAAK,KAAQ,WAAW,EAAO,EAAK,MACjD,KAGJ,WAAY,iBAAG,IAEf,MAAO,WACL,GAAA,SAAA,GAAO,EAAK,GACZ,EAAa,EAAK,KAEpB,OAAQ,MAEd,QAAU,SAAC,oBAAA,EAAU,GAAU,SAAC,GAAW,GAAA,SAAV,GAAD,EAAA,GAAW,kBACvC,IAAK,EACL,IAAK,EACL,KAAM,SAAC,GACH,MAAO,OAAM,WAAW,EAAO,KAA/B,QACI,KAAC,KAAO,WAAW,EAAO,IAC1B,KAAC,QACT,MAAO,iBAAG,MAAC,IAAI,KAAC,KAChB,OAAQ,EACR,UAAc,MAAA,EAAW,EAAO,MAEpC,WAAY,SAAC,oBAAA,EAAU,GAAU,SAAC,GAAiB,GAAA,GAAA,QAAhB,GAAA,EAAA,GAAK,EAAA,EAAA,GAAW,kBAC/C,OAAQ,EACR,SAAU,EACV,KAAM,SAAC,GAEH,MAD8C,OAAM,WAAW,EAAO,OAAtE,KAAC,QAAY,WAAW,EAAO,KACe,MAAM,WAAW,EAAO,KAAtE,OAAA,KAAC,UAAY,WAAW,EAAO,KACnC,MAAO,iBAAG,MAAC,OAAO,KAAC,UACnB,OAAQ,EACR,UAAc,MAAA,GAAS,MAAA,EAAY,EAAO,MAE9C,kBAAmB,SAAC,EAAY,oBAAZ,GAAM,aAAM,EAAU,GAAU,SAAC,GAAiB,GAAA,GAAA,QAAhB,GAAA,EAAA,GAAK,EAAA,EAAA,GAAW,kBAClE,OAAQ,EACR,SAAU,EACV,KAAM,SAAC,GAEH,MAD8C,OAAM,WAAW,EAAO,OAAtE,KAAC,QAAY,WAAW,EAAO,KACe,MAAM,WAAW,EAAO,KAAtE,OAAA,KAAC,UAAY,WAAW,EAAO,KACnC,MAAO,WACH,GAAA,SAAA,GAAU,EAAW,EAAO,IAC3B,iBAAkB,KAAC,SAAW,KAAC,OAAO,KAAC,SAAW,mBAAmB,EAClE,KAAK,KAAK,kBAAoB,KAAC,SAAS,KAAC,UAAa,KAAC,QAAQ,EAAI,KAAC,OAAQ,KAAC,WAAa,KAAC,SAAS,KAAC,aACpG,EAAI,kBAAkB,KAAC,WAChC,OAAQ,EACR,UAAc,MAAA,GAAS,MAAA,EAAY,EAAO,MAE9C,WAAY,SAAC,EAAS,EAAc,oBAAd,EAAK,mBAAS,EAAU,GAAa,WAAU,GAAA,SAAT,GAAA,GAAA,UAAA,OAAA,EAAA,KAAA,UAAA,MAAS,SAAC,EAAM,EAAQ,UAChF,UAAW,cAAc,KAAK,MAAW,QAAQ,IAAS,GAC1D,MAAO,EAAA,MAAA,KAAQ,GAAM,EAAM,EAAQ,GACnC,KAAM,SAAC,SAAW,MAAC,MAAM,KAAK,IAC9B,OAAQ,EACR,MAAO,iBAAG,MAAC,MAAM,QAAU,EAAK,cAAL,MAAA,EAAmB,KAAC,UAAa,MAAM,SAClE,UAAW,EAAA,MAAA,KAAQ,KAAQ,eAGnC,EAAiB,SAAC,UACd,MAAwB,EAAI,MAAM,GAClC,sBAAwB,EAAI,YAAY,GACxC,qBAAwB,EAAI,WAAW,MACvC,IAAwB,EAAI,IAAI,GAChC,MAAwB,EAAI,MAAM,GAClC,cAAwB,EAAI,IAAI,GAChC,QAAwB,EAAI,QAAQ,GACpC,eAAwB,EAAI,WAAW,GACvC,kBAAwB,EAAI,mBAAkB,EAAM,GACpD,kBAAwB,EAAI,mBAAkB,EAAO,GACrD,2BAAgC,EAAI,WAAW,EAAI,MAAS,QAAS,GACrE,0BAAgC,EAAI,WAAW,EAAI,MAAS,MAAS,GACrE,6BAAgC,EAAI,WAAW,EAAI,MAAS,MAAS,GACrE,6BAAgC,EAAI,WAAW,EAAI,QAAS,QAAS,GACrE,4BAAgC,EAAI,WAAW,EAAI,QAAS,MAAS,GACrE,+BAAgC,EAAI,WAAW,EAAI,QAAS,MAAS,KAhBjD,GAkBxB,GACI,MAAkB,SAAC,EAAS,SAAW,GAAmB,EAAS,IACnE,QAAkB,SAAC,EAAS,SAAW,GAAgB,EAAS,IAChE,iBAAkB,SAAC,EAAS,SAAS,GAAE,EAAmB,EAAS,IAAO,YAC1E,QAAkB,SAAC,EAAS,SAAS,GAAE,EAAmB,EAAS,IAAO,WAC1E,cAAkB,SAAC,EAAS,SAAS,GAAE,EAAmB,EAAS,IAAO,QAAQ,eAClF,cAAkB,SAAC,EAAS,SAAS,GAAE,EAAmB,EAAS,IAAO,QAAQ,gBAEtF,GACI,IACI,YAAa,EACb,UAAW,EACX,eACI,YAAa,sDACb,aAAc,sDACd,cAAe,iDACf,UAAW,aACX,WAAY,cACZ,QAAS,qBACT,cAAe,iBACf,OAAQ,SACR,GAAI,KACJ,GAAI,QAGhB,GAAc,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAChF,GAAc,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAClD,EAAU,SAAC,UAAY,IAAI,GAAQ,OAAO,GAAG,IAE7C,GACI,IAAK,SAAC,EAAK,SAAa,UAAC,SAAW,GAAO,GAAO,EAAO,GAAO,IAChE,WAAY,SAAC,EAAK,EAAc,EAAqB,oBAArB,EAAS,aAAY,EAAS,GAC1D,SAAC,GACG,GAAA,EACA,OADA,GAAW,GAAA,MAAK,KAAK,MAAM,EAAO,KAC/B,MAAM,GAAkB,GAC3B,EAAa,QAAQ,QAAS,SAAC,EAAG,GAC9B,OAAO,GAAP,IACS,UAAS,GAAK,aADvB,KAES,UAAS,GAAQ,EAAK,WAAW,EAF1C,KAGS,UAAS,GAAS,EAAK,WAHhC,KAIS,UAAS,GAAQ,EAAK,UAJ/B,KAKS,UAAS,GAAS,EAAK,SALhC,KAMS,UAAS,GAAK,QANvB,KAOS,UAAS,GAAQ,EAAK,WAP/B,KAQS,UAAS,GAAQ,EAAK,aAR/B,KASS,UAAS,GAAQ,EAAK,aAT/B,eAUS,IAAM,QAE/B,EAAc,iBAAA,UAAC,EAAI,GACf,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAGA,IAHA,EAAK,eACL,EAAK,KACL,EAAK,KACW,gBAAN,IAA+B,gBAAN,GAC/B,MAAa,OAAM,GAAZ,EACO,MAAM,GAAb,GACA,EAAK,CAGhB,IAFA,EAAI,OAAO,GAAI,cACf,EAAI,OAAO,GAAI,cACF,IAAK,EAAlB,MAAO,EACP,KAAyC,EAAG,KAAK,KAAO,EAAG,KAAK,GAAhE,MAAW,GAAI,EAAO,EAAO,EAG7B,KAFA,EAAI,EAAE,MAAM,GACZ,EAAI,EAAE,MAAM,GACN,EAAE,QAAW,EAAE,QAGjB,GAFA,EAAK,EAAE,QACP,EAAK,EAAE,QACJ,IAAQ,EACP,MAAG,GAAG,KAAK,IAAQ,EAAG,KAAK,GAChB,EAAG,QAAQ,EAAI,MAAQ,EAAG,QAAQ,EAAI,MAElC,EAAK,EAAQ,EAAO,SAC3C,GAAE,OAAS,EAAE,SAtBH,MAyBd,EAAE,gBAAkB,oBAAA,EAAqB,YAAA,EAAa,UAAA,EAAW,SAAA,EAAU,QAAA,EACvE,YAAA,EAAa,aAAA,GAMX,EAAA,WACW,QAAA,GAAC,EAAO,yOACjB,KAAC,WAAa,EAAK,WACnB,KAAC,eAAiB,EAAK,eACvB,KAAC,SAAW,EAAK,KACjB,KAAC,SAAW,EAAK,KACjB,KAAC,SAAW,EAAK,KACjB,KAAC,QACD,KAAC,WACD,KAAC,WACD,KAAC,aACD,KAAC,aACD,KAAC,SAAW,KAAC,WAAW,YACxB,KAAC,QAAS,EAGV,EAAU,cAAc,EAAO,EAAK,kBAAmB,SAAA,SAAA,UAAC,GACpD,MAA0B,GAAK,OAAO,GAAtC,EAAC,cAAc,GAAf,SADmD,aAI3D,GAAC,cAAgB,SAAC,EAAO,EAAmB,GACxC,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAQA,IAPI,EADD,EAAE,cAAc,GACH,EAEA,SAAC,GACT,GAAA,GAAA,EAAA,CAAA,KAAA,IAAA,UAAA,EAAO,GAAP,OAAA,EAAA,EAAA,IAAA,EAAwB,EAAO,SAC/B,GAAE,IAGP,EAAE,WAAW,SACZ,GAAM,EACL,IAAG,EAAE,QAAQ,GAAb,CACD,GAAG,EAAE,QAAQ,EAAM,IAAnB,CACI,SAAA,IAAA,2BAAuC,EAAI,IACvC,KACA,EAAA,EAAA,EAAA,KAAA,IAAA,wBAAA,EAAO,GAAK,EAAc,WAC1B,EAAU,iBAEd,KAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,kBAAA,EAAU,aACb,GAAG,YAAiB,cACrB,MACA,EAAE,kBAAmB,GAAO,KAAK,iBAAO,GAAQ,KAAK,EAAE,MAAM,UAC7D,EAAE,aAAc,GAAO,KAAK,iBACxB,MACA,EAAE,KAAM,MAAM,KAAK,SAAC,SAAM,GAAO,EAAQ,IAAM,EAAE,MAAM,SACvD,EAAU,IAEd,MAAU,IAAA,OAAM,yBAGxB,EAAC,eAAiB,SAAC,GACf,GAAA,EAEA,OAFA,MACA,EAAU,cAAc,KAAW,SAAC,SAAW,GAAO,KAAK,KACpD,eAEX,QAAS,SAAC,EAAI,SAAO,GAAY,EAAI,gBAErC,QAAS,SAAC,EAAE,SAAM,MAAC,QAAQ,EAAE,OAAQ,EAAE,qBAEvC,SAAU,iBACC,MAAC,SACJ,KAAC,QAAQ,KAAK,KAAC,SACf,KAAC,QAAQ,KAAK,KAAC,UACnB,KAAC,QAAS,eAEd,WAAY,WAER,MADA,MAAC,WACM,KAAC,qBAEZ,WAAY,WAER,MADA,MAAC,WACM,KAAC,qBAEZ,cAAe,SAAC,GACZ,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAEA,KAFA,KACA,KACA,EAAA,KAAA,SAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,WAAA,EAAO,KAAP,OAAA,EAAA,EAAA,IAAA,EAAwB,OACxB,KAAA,EAAA,KAAA,SAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,WAAA,EAAO,KAAP,OAAA,EAAA,EAAA,IAAA,EAAwB,OAkBxB,OAjBA,GAAa,EAAO,KAAK,OAAO,aAAa,IAC7C,EAAa,EAAO,KAAK,OAAO,aAAa,IAE7C,KAAC,SAAS,KAAK,GAEK,IAAjB,EAAO,SACC,KAAC,UAAU,KACd,KAAC,QAAQ,KAAK,GACd,KAAC,UAAU,GAAc,KAAC,WAAW,KAAM,OAC/C,KAAC,UAAU,GAAY,KAAK,IAEZ,IAAjB,EAAO,SACC,KAAC,UAAU,KACd,KAAC,QAAQ,KAAK,GACd,KAAC,UAAU,GAAc,KAAC,WAAW,QAAU,IACnD,KAAC,UAAU,GAAY,KAAK,IAEZ,IAAjB,EAAO,QAAiC,IAAjB,EAAO,QACtB,KAAC,KAAK,KACT,KAAC,KAAK,OACH,KAAC,KAAK,GAAY,KACrB,KAAC,KAAK,GAAY,GAAc,KAAC,WAAW,KAAM,EAAQ,IAC9D,KAAC,KAAK,GAAY,GAAY,KAAK,IALvC,oBAOJ,cAAe,SAAC,EAAQ,GACpB,GAAA,GAAA,EAAA,CAUA,OAVA,GAAa,EAAO,KAAK,OAAO,aAAa,IAC7C,EAAa,EAAO,KAAK,OAAO,aAAa,IAEzC,EADgB,IAAjB,EAAO,QAAiC,IAAjB,EAAO,OACvB,KAAC,SACc,IAAjB,EAAO,OACL,KAAC,UAAU,GACI,IAAjB,EAAO,OACL,KAAC,UAAU,GAEX,KAAC,KAAK,GAAY,GAC5B,MAAA,EAAO,GAAO,MAAO,iBAAI,OAAO,OAAQ,iBAAG,WAMnD,EAAkB,SAAC,GACjB,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,GAAa,OACb,EAAI,OACJ,EAAW,OACX,EAAS,OACT,EAAU,OACV,EAAI,OACJ,EAAI,OACJ,EAAI,OACJ,EAAS,OACT,EAAW,OACX,EAAS,OACT,EAAU,OACV,EAAK,OACL,EAAkB,OAClB,EAAK,OACL,EAAM,OACN,EAAM,OACN,EAAI,OACJ,EAAW,EAAU,SACrB,EAAW,EAAU,SACrB,EAAW,EAAU,SACrB,EAAU,EAAU,aACpB,EAAU,EAAU,aAEpB,EAAW,SAAC,EAAK,EAAG,GAClB,GAAA,GAAA,EAAA,EAAA,EAAA,CAMA,IANA,EAAM,OACN,EAAS,OACT,EAAO,OACP,EAAI,OACJ,EAAK,OACL,EAAK,OACG,IAAL,EAAH,CAGE,GAFA,GAAS,EACT,EAAI,EACI,GAAL,EAED,IADA,EAAK,EACO,GAAN,GACJ,EAAI,EACD,EAAI,EAAI,GAAG,KAAM,EAAI,GAAG,KACzB,GAAS,KACT,MAGJ,KADA,EAAK,EACC,GAAM,GACV,EAAI,EACD,EAAI,EAAI,GAAG,KAAM,EAAI,GAAG,KACzB,GAAS,KACT,CACN,IAAG,EACD,MAAO,GAEX,IADA,EAAM,EACA,EAAI,EAAM,EAAI,QAApB,CAGE,GAFA,GAAO,EACP,EAAI,EACI,GAAL,EAED,IADA,EAAK,EACO,GAAN,GACJ,EAAI,EACD,EAAI,GAAG,KAAM,EAAI,EAAI,GAAK,KAC3B,GAAO,KACP,MAGJ,KADA,EAAK,EACC,GAAM,GACV,EAAI,EACD,EAAI,GAAG,KAAM,EAAI,EAAI,GAAK,KAC3B,GAAO,KACP,CACN,IAAG,EACD,KACF,WACF,IAGF,EAAS,EAAE,gDACX,KAAA,IAAA,GAAA,CACE,EAAI,EAAS,GACb,EAAK,EAAE,QACkG,IAAf,SAAS,IAAiC,IAArB,EAAS,QAAxH,EAAG,OAAO,EAAE,QAAQ,KAAK,UAAW,EAAS,QAAQ,KAAK,UAAW,EAAS,SAC9E,EAAG,OAAO,EAAE,6BAA6B,KAAK,IAC9C,EAAgB,EAAU,qBACvB,EAAc,YACf,EAAc,OAAO,KAAK,EAAc,cAAc,OACtD,EAAc,IAEd,EAAc,EACd,EAAc,EAChB,KAAA,IAAA,GACE,EAAS,EAAQ,GACjB,EAAK,EAAE,4BAA4B,KAAK,EAAO,IAAI,KAAK,UAAW,GAChC,SAAS,KAAM,EAAS,OAAS,GAA2B,IAArB,EAAS,QAAnF,EAAG,KAAK,UAAW,GACnB,EAAG,OAAO,EAC8H,KAAf,SAAS,IAApI,EAAG,OAAO,EAAE,8BAA8B,KAAK,UAAU,KAAK,UAAW,GAAa,KAAK,UAAW,EAAS,SAC/G,EAAO,OAAO,GAChB,GAAwB,IAArB,EAAS,OAAZ,CACE,EAAK,EAAE,OACP,KAAA,IAAA,GACE,EAAI,EAAS,GACb,EAAG,OAAO,EAAE,6BAA6B,KAAK,GAEhD,IADA,EAAgB,EAAU,qBACvB,EAAc,WAAjB,CACK,EAAS,OAAS,IACnB,EAAK,EAAE,QACP,EAAG,OAAO,IACZ,EAAM,EAAc,YACpB,KAAA,IAAA,GACE,IAAA,IAAA,GACE,EAAG,OAAO,EAAE,4BAA4B,KAAK,GAAG,KAAK,QAAS,GAClE,KAAA,IAAA,GACE,EAAG,OAAO,EAAE,4BAA4B,KAAK,GAAG,KAAK,QAAS,QAEhE,GAAK,EAAE,QAC2D,IAAnB,EAAS,QAAxD,EAAG,SAAS,iBAAiB,KAAK,UAClC,EAAG,OAAO,EACZ,GAAO,OAAO,GAChB,IAAA,IAAA,GAAA,CACE,EAAS,EAAQ,GACjB,EAAK,EAAE,OACP,KAAA,IAAA,GACE,EAAM,EAAO,GAIb,EAAU,EACF,IAAL,EACD,EAAU,EAAS,OAEhB,EAAS,OAAS,IACnB,EAAU,GACd,EAAU,EAAS,EAAS,SAAS,GAAI,SAAS,IACpC,KAAX,IACD,EAAK,EAAE,4BAA8B,KAAK,GAAK,KAAK,UAAW,GAAS,KAAK,UAAW,GACxF,EAAG,OAAO,GACd,KAAA,IAAA,GAGE,GAFA,EAAS,EAAQ,GACjB,EAAa,EAAU,cAAc,EAAQ,GAC1C,EAAW,WAAd,CACE,EAAM,EAAW,YACjB,KAAA,IAAA,GACE,EAAG,OAAO,EAAE,wBAA0B,EAAI,OAAS,EAAE,IAAM,EAAI,MAAM,KAAK,EAAW,OAAO,EAAI,KAAK,KAAK,QAAS,EAAI,SAIzH,IAFA,EAAM,EAAW,QAGf,EAAG,OAAO,EAAE,wBAA0B,EAAI,OAAS,EAAI,MAAM,KAAK,EAAW,OAAO,IAAM,KAAK,QAAS,QAOxG,KALA,EAAgB,EAAU,qBAC1B,EAAc,EACX,EAAc,aACf,EAAc,OAAO,KAAK,EAAc,cAAc,QACxD,EAAK,EACM,EAAL,GACJ,EAAG,OAAO,EAAE,wBAA0B,EAAI,OAAS,EAAI,IAAM,EAAK,MAAM,KAAK,IAAI,KAAK,QAAS,OAC/F,GAER,IADA,EAAkB,EAAU,cAAc,MACvC,EAAgB,WAAnB,CACE,EAAM,EAAgB,YACtB,KAAA,IAAA,GAEE,EAAG,OAAO,iCAAmC,EAAgB,OAAO,EAAI,IAAM,aAEhF,GAAM,EAAgB,QACtB,EAAG,OAAO,EAAE,kCAAkC,KAAK,EAAgB,OAAO,IAAM,KAAK,QAAS,GAAK,KAAK,MAAO,MAAQ,GACzH,GAAO,OAAO,GAChB,EAAK,EAAE,QACP,EAAK,EAAE,8BAA8B,KAAK,UAC1C,EAAG,KAAK,UAAW,EAAS,QAAiC,IAAnB,EAAS,OAAiB,EAAO,IAC3E,EAAG,OAAO,EACV,KAAA,IAAA,GAIE,GAHA,QAAQ,IAAI,kBACZ,EAAS,EAAQ,GACjB,EAAkB,EAAU,iBAAkB,GAC3C,EAAgB,WAAnB,CACE,EAAM,EAAgB,YACtB,KAAA,IAAA,GACE,EAAG,OAAO,EAAE,kCAAkC,KAAK,EAAgB,OAAO,EAAI,KAAK,KAAK,QAAS,EAAI,IAAI,KAAK,MAAO,MAAQ,QAE/H,GAAM,EAAgB,QACtB,EAAG,OAAO,EAAE,kCAAkC,KAAK,EAAgB,OAAO,IAAM,KAAK,QAAS,GAAK,KAAK,MAAO,MAAQ,GAE3H,IADA,EAAkB,EAAU,qBACzB,EAAgB,WAAnB,CACE,EAAM,EAAgB,YACtB,KAAA,IAAA,GACE,EAAK,EAAI,GACT,EAAO,6BAA+B,EAAK,QAC3C,EAAG,OAAO,OAEZ,GAAM,EAAgB,QACtB,EAAO,EAAE,8BAA8B,KAAK,EAAgB,OAAO,IAAM,KAAK,QAAS,GACvF,EAAG,OAAO,SACZ,GAAO,OAAO,GACd,EAAO,KAAK,cACV,EAAQ,OACR,EAAQ,SAEV,GAEF,EAAqB,SAAC,EAAW,GAE7B,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,IACI,eACI,OAAQ,WAEhB,EAAO,EAAE,OAAO,EAAU,GAE1B,EAAW,EAAU,SACrB,EAAW,EAAU,SACrB,EAAU,EAAU,aACpB,EAAU,EAAU,aAGpB,EAAS,SAAS,cAAc,SAChC,EAAO,UAAY,WAGnB,EAAW,SAAC,EAAK,EAAG,GAChB,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,IAAQ,IAAL,EAAH,CAEI,IADA,GAAS,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EACF,EAAI,EAAE,GAAG,KAAM,EAAI,GAAG,KACrB,GAAS,EACjB,IAAG,EACD,MAAO,GAEb,IADA,EAAM,EACA,EAAE,EAAM,EAAI,QAAlB,CAEI,IADA,GAAO,EACE,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EACU,EAAI,GAAG,KAAM,EAAI,EAAE,GAAK,KAAvC,GAAO,EACX,IAAS,EAAT,KACA,KACJ,MAAO,GAGX,KAAA,IAAA,0BACI,EAAK,SAAS,cAAc,MACV,IAAf,SAAS,IAA+B,IAAnB,EAAS,SAC7B,EAAK,SAAS,cAAc,MAC5B,EAAG,aAAa,UAAW,EAAS,QACpC,EAAG,aAAa,UAAW,EAAS,QACpC,EAAG,YAAY,IACnB,EAAK,SAAS,cAAc,MAC5B,EAAG,UAAY,eACf,EAAG,UAAY,EACf,EAAG,YAAY,EACf,KAAA,IAAA,wBACI,EAAI,EAAS,EAAS,SAAS,GAAI,SAAS,IACpC,KAAL,IACC,EAAK,SAAS,cAAc,MAC5B,EAAG,UAAY,cACf,EAAG,UAAY,EAAO,GACtB,EAAG,aAAa,UAAW,GACxB,SAAS,KAAM,EAAS,OAAO,GAAyB,IAAnB,EAAS,QAC7C,EAAG,aAAa,UAAW,GAC/B,EAAG,YAAY,IACL,KAAf,SAAS,KACR,EAAK,SAAS,cAAc,MAC5B,EAAG,UAAY,gBACf,EAAG,UAAY,EAAK,cAAc,OAClC,EAAG,aAAa,UAAW,EAAS,QAA+B,IAAlB,EAAS,OAAgB,EAAO,IACjF,EAAG,YAAY,IACnB,EAAO,YAAY,GAGvB,GAAqB,IAAlB,EAAS,OAAZ,CACI,EAAK,SAAS,cAAc,KAC5B,KAAA,IAAA,wBACI,EAAK,SAAS,cAAc,MAC5B,EAAG,UAAY,eACf,EAAG,UAAY,EACf,EAAG,YAAY,GACnB,GAAK,SAAS,cAAc,MACP,IAAlB,EAAS,SACR,EAAG,UAAY,gBACf,EAAG,UAAY,EAAK,cAAc,QACtC,EAAG,YAAY,GACf,EAAO,YAAY,GAGvB,IAAA,IAAA,0BACI,EAAK,SAAS,cAAc,KAC5B,KAAA,IAAA,wBACI,EAAI,EAAS,EAAS,SAAS,GAAI,SAAS,IACpC,KAAL,IACC,EAAK,SAAS,cAAc,MAC5B,EAAG,UAAY,cACf,EAAG,UAAY,EACf,EAAG,aAAa,UAAW,GACxB,SAAS,KAAM,EAAS,OAAO,GAAwB,IAAlB,EAAS,QAC7C,EAAG,aAAa,UAAU,GAC9B,EAAG,YAAY,IACvB,KAAA,IAAA,wBACI,EAAa,EAAU,cAAc,EAAQ,GAC7C,EAAM,EAAW,QACjB,EAAK,SAAS,cAAc,MAC5B,EAAG,UAAY,aAAa,EAAE,OAAM,EACpC,EAAG,UAAY,EAAW,OAAO,GACjC,EAAG,aAAa,aAAc,GAC9B,EAAG,YAAY,GAEnB,GAAkB,EAAU,cAAc,MAC1C,EAAM,EAAgB,QACtB,EAAK,SAAS,cAAc,MAC5B,EAAG,UAAY,oBACf,EAAG,UAAY,EAAgB,OAAO,GACtC,EAAG,aAAa,aAAc,GAC9B,EAAG,aAAa,WAAY,MAAM,GAClC,EAAG,YAAY,GACf,EAAO,YAAY,GAGvB,EAAK,SAAS,cAAc,MAC5B,EAAK,SAAS,cAAc,MAC5B,EAAG,UAAY,gBACf,EAAG,UAAY,EAAK,cAAc,OAClC,EAAG,aAAa,UAAW,EAAS,QAAgC,IAAnB,EAAS,OAAiB,EAAO,IAClF,EAAG,YAAY,EACf,KAAA,IAAA,wBACI,EAAkB,EAAU,iBAAkB,GAC9C,EAAM,EAAgB,QACtB,EAAK,SAAS,cAAc,MAC5B,EAAG,UAAY,oBACf,EAAG,UAAY,EAAgB,OAAO,GACtC,EAAG,aAAa,aAAc,GAC9B,EAAG,aAAa,WAAY,MAAM,GAClC,EAAG,YAAY,GAcnB,OAbA,GAAkB,EAAU,qBAC5B,EAAM,EAAgB,QACtB,EAAK,SAAS,cAAc,MAC5B,EAAG,UAAY,gBACf,EAAG,UAAY,EAAgB,OAAO,GACtC,EAAG,aAAa,aAAc,GAC9B,EAAG,YAAY,GACf,EAAO,YAAY,GAGnB,EAAO,aAAa,eAAgB,EAAQ,QAC5C,EAAO,aAAa,eAAgB,EAAQ,QAErC,GAMX,EAAE,GAAG,MAAQ,SAAC,EAAO,GACjB,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,IACI,QACA,QACA,OAAQ,kBAAG,GACX,WAAY,EAAoB,UAChC,eAAgB,QAChB,qBACA,SAAU,EACV,gBAAiB,KACjB,cAAe,EAAQ,GAAG,eAE9B,EAAO,EAAE,OAAO,EAAU,GAE1B,EAAS,IACT,KACI,EAAgB,GAAA,GAAU,EAAO,EACjC,KACI,EAAS,EAAK,SAAS,EAAW,EAAK,iBAD3C,MAAA,GAEM,EAAA,EACwB,mBAAA,UAAA,OAAA,SAA1B,QAAQ,MAAM,EAAE,OAChB,EAAS,EAAE,UAAU,KAAK,EAAK,cAAc,cANrD,MAAA,GAOM,EAAA,EACwB,mBAAA,UAAA,OAAA,SAA1B,QAAQ,MAAM,EAAE,OAChB,EAAS,EAAE,UAAU,KAAK,EAAK,cAAc,cAGtB,IAD3B,EAAI,KAAK,GACwB,EAAE,iBAAnC,EAAE,YAAY,EAAE,UAChB,OAAO,MAAC,OAAO,IAOnB,EAAE,GAAG,QAAU,SAAC,EAAO,EAAW,EAAmB,GACjD,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,YAD8B,GAAY,aAAO,EAAO,MACxD,EAAS,OACT,EAAS,OACT,GACI,qBACA,YAAa,EAAQ,GAAQ,YAC7B,UAAW,EAAQ,GAAQ,UAC3B,oBACA,UAAW,IACX,QAAU,QAAU,QACpB,cACA,oBAAqB,OACrB,qBAAqB,EACrB,iBAAiB,cAAe,EAAQ,GAAQ,eAChD,UAAW,KACX,OAAQ,kBAAG,GACX,cAAe,EAAQ,GAAQ,eAEnC,EAAe,KAAC,KAAK,kBAEjB,EADG,MAAA,GAAiB,EACb,EAAE,OAAO,EAAU,GAEnB,CAEX,KAEI,EAAQ,EAAU,eAAe,GACjC,EAAA,kBAAW,GAAA,EAAA,GAAA,SAAA,IAAA,uBAAA,eACX,EAAA,EAAA,iBAAA,KAAA,IAAA,gBAAyD,EAAA,KAAS,EAAT,GAAA,GAAzD,EAAQ,KAAK,EAIb,KADA,KACA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,WAAA,EAAW,KAEX,GAAU,cAAc,EAAO,EAAK,kBAAmB,SAAC,GACpD,GAAA,GAAA,EAAA,CAAA,UAAA,IAAA,wBAA4B,EAAK,OAAO,eACpC,EAAK,8BACS,GAAM,UACpB,EAAW,GAAG,mBAGtB,EAAU,EAAE,WAAW,KAAK,cAAe,GAG3C,EAAkB,EAAE,QAEpB,EAAW,EAAE,YACR,SAAS,eACT,SAAS,GACT,KAAK,SAAU,iBAAG,OACvB,EAAA,EAAA,SAAA,KAAA,IAAA,gBACI,EAAE,YAAY,IAAI,GAAG,KAAK,GAAG,SAAS,EAQ1C,IAJA,EAAU,EAAE,QAAQ,SAAS,8BAC7B,EAAA,yBAAmB,KAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,WAAwB,EAAA,KAAS,EAAK,iBAAd,GAAA,UAAxB,eAEnB,GAAkC,EACH,SAA5B,EAAK,oBAAR,CAEI,IADA,EAAa,EACb,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,WAAA,GAAc,EAAE,MAChB,GAAkC,EAAa,IAG/C,EAAQ,SADT,EAAK,uBAAuB,GAAQ,EAClB,cAEA,kBAGd,SAAC,GACA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAKA,IALA,EAAA,gBAAQ,UAAA,IAAA,GAAA,UAAA,eACR,GAAkB,EAClB,EAAY,EAAE,SAAS,SAAS,gBAAgB,OAEhD,EAAU,OAAO,EAAE,QAAQ,KAAQ,EAAE,KAAI,EAAK,OAAO,MAClD,EAAK,OAAS,EAAK,UAClB,EAAU,OAAO,EAAE,OAAO,KAAK,EAAK,cAAc,cAkBlD,KAhBA,EAAO,EAAE,OAAO,SAAS,GACzB,EAAK,OAAO,EAAE,YAAa,KAAK,WAAW,KAAK,EAAK,cAAc,WAAW,KAAK,QAAS,iBACxF,GAAU,KAAK,iBAAiB,KAAK,WAAW,MACpD,EAAK,OAAO,EAAE,YAAa,KAAK,WAAW,KAAK,EAAK,cAAc,YAAY,KAAK,QAAS,iBACzF,GAAU,KAAK,iBAAiB,KAAK,WAAW,MACpD,EAAK,OAAO,EAAE,WAAY,KAAM,OAAQ,YAAa,EAAK,cAAc,cAAe,QAAO,cAAc,KAAK,QAAS,WACtH,GAAA,SAAA,GAAS,EAAE,MAAM,MAAM,cACvB,EAAU,KAAK,wBAAwB,KAAK,WACxC,GAAA,EACA,OADA,GAAa,EAAE,MAAM,OAAO,cAAc,QAAQ,GAC/B,KAAhB,EACC,EAAE,MAAM,OAER,EAAE,MAAM,YAEpB,EAAiB,EAAE,SAAS,SAAS,qBAAqB,SAAS,GAEnE,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,WACK,EAAI,EAAW,GAAG,GAClB,EAAa,EAAE,WACf,EAAwB,EAAK,WAAW,GAAS,EAAA,KAAK,EAAK,WAAW,GAArB,IAAA,GAA8B,EAC/E,IAAA,EAAoB,GACpB,EAAE,WACE,KAAK,OAAQ,YAAY,SAAS,aAClC,KAAK,WAAY,GAAoB,KAAK,UAAW,EAAE,IACvD,SAAS,GACb,EAAW,OAAO,EAAE,UAAU,KAAK,IACnC,EAAW,OAAO,EAAE,UAAU,KAAK,KAAK,EAAE,MAC1C,EAAe,OAAO,EAAE,OAAO,OAAO,UAE/C,GAAe,WACX,GAAA,EAMA,OANA,GAAkB,EAAU,KAAK,qBAAqB,OACpC,EAAU,KAAK,6BAA6B,OAC3D,EAAkB,EACjB,EAAS,SAAS,wBAElB,EAAS,YAAY,wBACtB,EAAK,OAAS,EAAK,UAClB,EAAU,SAEV,EAAU,OAAO,EAAG,IAE5B,EAAE,OAAO,SAAS,GACb,OAAO,EAAE,YAAa,KAAK,WAAW,KAAK,MAAM,KAAK,QAAS,IAEpE,EAAiB,SAAC,SACd,GAAU,KAAI,KAAM,EAAE,MAAO,IAAK,EAAE,QAAO,SAC3C,EAAU,KAAK,cAAc,IAAI,IACjC,EAAU,KAAK,wBAAwB,QAE3C,EAAe,EAAE,UAAU,SAAS,eAAe,KAAK,aACnD,KAAK,QAAS,GAEnB,EAAW,EAAE,QAAQ,SAAS,QAAQ,GACjC,OAAO,EAAE,UAAU,SAAS,WAAW,KAAK,GAAG,KAAK,WAAY,GAAG,OAAO,IAClC,GAA7C,EAAS,SAAS,wBAClB,EAAQ,OAAO,GAAU,OAAO,GAEhC,EAAS,KAAK,WAAY,GAnElC,KAAA,IAAA,YACQ,EAoER,GAAM,EAAE,QAAQ,SAAS,GAIzB,EAAa,EAAE,YAAY,SAAS,iBAC/B,KAAK,SAAU,iBAAG,OACvB,EAAA,EAAA,WAAA,KAAA,IAAA,gBACI,EAAW,OAAO,EAAE,YAAY,IAAI,GAAG,KAAK,GAiChD,KA/BA,EAAE,QAAQ,SAAS,WAChB,SAAS,GACT,OAAO,GACP,OAAO,EAAE,SAGZ,EAAE,QAAQ,SAAS,yCAAyC,SAAS,GAErE,EAAM,EAAE,QAAQ,SAAS,GAGzB,EAAI,OAAO,EAAE,QAAQ,SAAS,4BAA4B,KAAK,SAAU,QAGzE,EAAa,EAAE,QACV,KAAK,SAAU,OACf,SAAS,mBACT,SAAS,GAGX,EAAK,uBAAuB,GAAQ,GACnC,EAAQ,KAAK,mBAAmB,QAAQ,GACxC,EAAQ,KAAK,mBAAmB,QAAQ,IAExC,EAAQ,QAAQ,EAAE,QAAQ,OAAO,GAAiB,OAAO,IAG7D,KAAC,KAAK,GAIN,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,WACI,KAAC,KAAK,YAAY,OAAO,KAAC,KAAK,SAAS,EAAE,QAAQ,EAAG,IACzD,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,WACI,KAAC,KAAK,YAAY,OAAO,KAAC,KAAK,SAAS,EAAE,QAAQ,EAAG,IACtD,OAAA,EAAA,gBACC,KAAC,KAAK,kBAAkB,IAAI,EAAK,gBAClC,MAAA,EAAA,cACC,KAAC,KAAK,gBAAgB,IAAI,EAAK,cAEnC,GAAgB,EAChB,KACA,KAEA,EAAiB,SAAA,SAAA,YACb,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAiBA,IAjBA,GACI,kBAAmB,EAAK,kBACxB,cAAe,EAAK,cACpB,gBAAiB,EAAK,gBACtB,QAAU,SAEd,EAAA,OAAA,EAAA,EAAA,YAAA,EAAA,aAAA,WAAA,EAA0E,EAC1E,KACA,EAAC,KAAK,4BAA4B,KAAK,iBAAG,GAAQ,KAAK,KAAK,EAAE,MAAM,KAAK,eACzE,EAAC,KAAK,4BAA4B,KAAK,iBAAG,GAAQ,KAAK,KAAK,EAAE,MAAM,KAAK,eACzE,EAAC,KAAK,mCAAmC,KAAK,WAC1C,MAAyB,KAAtB,EACC,EAAE,MAAM,UAER,IAC4C,KAAjB,EAAE,MAAM,MAAnC,EAAK,KAAK,EAAE,MAAM,OAAlB,UAEiB,IAAtB,EAEC,IADA,EAAU,EAAC,KAAK,YACP,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAT,CAKI,IAJA,EAAc,EAAE,YACX,SAAS,mBACT,OAAO,EAAE,aACT,KAAK,SAAU,iBAAG,OACvB,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,WACI,EAAY,OAAO,EAAE,YAAY,IAAI,GAAM,KAAK,GACpD,GAAQ,OAAO,GAGvB,GADA,EAAO,OACmB,OAAvB,EAAK,gBAAkD,UAAvB,EAAK,eAAxC,CACK,GACD,EAAS,EAAK,KACd,EAAS,EAAK,MAEd,EAAK,KAAO,EACd,EAAO,EACP,EAAU,EAAM,KAAK,YACrB,EAAc,EAAE,YAAY,SAAS,mBAAmB,KAAK,YAAY,GAAM,KAAK,SAAU,iBAC5F,GAAS,EAAE,MAAM,MACjB,KAEF,KAAA,IAAA,GAAA,KACE,EAAO,EAAK,KAAK,GACjB,GAAI,EACuB,KAAxB,EAAO,QAAQ,KAChB,GAAI,GACN,EAAY,OAAO,EAAE,YAAY,IAAI,GAAM,KAAK,GAAM,KAAK,WAAY,GACzE,GAAQ,OAAO,GAkDjB,MAhDG,KACC,EAAI,EACsB,UAAvB,EAAK,gBACJ,EAAC,KAAK,mCAAmC,KAAK,iBAC1C,GAAE,MAAM,IAAI,EAAK,IACjB,MACR,GAAgB,GAEpB,EAAQ,eAAiB,EAAW,MACpC,EAAQ,KAAO,EACf,EAAQ,WAAa,EAAK,YAAY,EAAW,OAAO,GACxD,EAAQ,SAAW,EAAK,UAAU,EAAS,OAG3C,KACA,EAAC,KAAK,mBAAmB,IAAI,YAAY,KAAK,WAC1C,GAAA,EACA,OADA,GAAS,EAAE,MAAM,KAAK,UACnB,MAAA,EAAA,EAAA,IACC,EAAW,EAAO,IAAI,KAAM,EAAO,IAEnC,EAAW,EAAO,KAAQ,EAAO,MAEzC,EAAQ,OAAS,SAAC,GACd,GAAA,GAAA,CAAA,KAAoB,EAAK,OAAO,GAAhC,OAAO,CACP,KAAA,IAAA,GACI,UAAA,EAAgB,GAAG,EAAO,GAAV,EAAA,KAAgB,EAAhB,IAAA,EAAhB,OAAO,CACX,QAAO,GAEX,EAAW,MAAM,EAAM,GACvB,EAAiB,EAAE,OAAO,GACtB,KAAM,EAAQ,KACd,KAAM,EAAQ,KACd,KAAM,EACN,WAAY,EACZ,eAAgB,EAAW,MAC3B,aAAc,EAAS,QAE3B,EAAC,KAAK,iBAAkB,GAGrB,EAAK,sBACJ,EAAU,EAAE,eAAe,YAC3B,EAAuB,EAAC,KAAK,iCAC7B,EAAE,GAAsB,SAAS,MAC5B,KAAK,SAAC,EAAG,SAAM,GAAQ,EAAE,GAAG,OAAQ,EAAE,GAAG,UACzC,SAAS,IAElB,EAAW,IAAI,UAAW,GACQ,MAAA,EAAA,UAAlC,EAAK,UAAU,GAAf,SAlGa,MAoGjB,EAAU,iBAAA,kBACN,GAAW,IAAI,UAAW,IAC1B,WAAW,EAAgB,MAFrB,MAKV,IAEA,KAAC,KAAK,qBAAqB,UACnB,OAAQ,SAAC,EAAG,GAAO,MAAiB,OAAA,EAAA,OAAjB,IAAA,QACnB,YAAa,KAAC,KAAK,qBACnB,MAAO,KACP,YAAa,mBAtRzB,MAAA,GAuRM,EAAA,EACwB,mBAAA,UAAA,OAAA,SAA1B,QAAQ,MAAM,EAAE,OAChB,KAAC,KAAK,EAAK,cAAc,eAC7B,MAAO,OAMX,EAAE,GAAG,QAAU,SAAC,GACZ,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CA0BA,kBA3BY,EAAQ,WACpB,EAAU,KAAC,KAAK,WAChB,EAAU,KAAC,KAAK,WAEhB,EAAW,SAAC,EAAO,EAAK,GACpB,GAAA,EAKA,OALA,GAAA,WAAS,OAAO,GAAP,IACA,YAAa,UAAC,SAAQ,KAAK,EAAM,EADjC,KAEA,cAAa,UAAC,SAAW,GAAI,KAAI,EAFjC,KAGA,aAAa,UAAC,SAAQ,GAAG,EAAM,EAAI,UAErC,SAAC,GACJ,GAAA,GAAA,CAGA,OAHA,GAAY,IAAM,KAAK,MAAM,KAAK,EAAE,IAAM,EAAI,IAC9C,EAAM,EAAU,SAAS,IAAI,MAAM,KAAK,GACX,IAAd,EAAI,SAAnB,EAAM,EAAE,GACD,EAAO,KAEtB,EAAa,SAAA,SAAA,UAAC,EAAO,GACjB,GAAA,GAAA,EAAA,QAAA,GAAc,SAAC,SACX,GAAC,KAAK,GAAO,KAAK,WACd,GAAA,EACA,OADA,GAAI,EAAE,MAAM,KAAK,SACA,MAAA,GAAO,SAAS,GAAjC,EAAE,EAAG,EAAE,OAAP,UAER,KACA,EAAY,SAAC,SAAM,GAAO,KAAK,KAC/B,EAAW,EAAS,EAAO,KAAK,IAAL,MAAA,KAAS,GAAY,KAAK,IAAL,MAAA,KAAS,IACzD,EAAY,SAAC,EAAG,SAAS,GAAK,IAAI,mBAAoB,IAAM,EAAS,QAT5D,MAWN,GAAP,IACS,UACD,EAAW,UAAW,MADrB,MADT,KAGS,aACD,IAA6C,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAA7C,EAAW,cAAc,EAAK,MAD7B,MAHT,KAKS,aACD,IAA6C,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAA7C,EAAW,cAAc,EAAK,OAKtC,MAHA,GAAW,qBAAsB,OACjC,EAAW,qBAAsB,OAE1B,MAMX,EAAE,GAAG,SAAY,WACb,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,CAgCA,KAhCA,EAAU,KAAC,KAAK,WAChB,EAAU,KAAC,KAAK,WAEhB,EAAa,SAAA,SAAA,UAAC,GACV,GAAA,GAAA,EAAA,EAAA,QAAA,GAAc,SAAC,SACX,GAAC,KAAK,GAAO,KAAK,WACd,GAAA,EACA,OADA,GAAI,EAAE,MAAM,KAAK,SACA,MAAA,GAAO,SAAS,GAAjC,EAAE,EAAG,EAAE,OAAP,UAER,KACA,EAAY,SAAC,SAAM,GAAO,KAAK,KAC/B,EAAM,KAAK,IAAL,MAAA,KAAS,GACf,EAAS,SAAC,SAAM,KAAI,GAAG,IAAI,IAC3B,EAAY,SAAC,EAAG,GACZ,GAAA,GAAA,QAAA,GAAO,EAAK,OACZ,EAAU,EAAE,SAAS,KACjB,SAAY,WACZ,OAAU,SACd,EAAQ,OAAO,EAAE,SAAS,KACtB,SAAY,WACZ,OAAU,EACV,KAAQ,EACR,MAAS,EACT,OAAU,EAAO,GAAK,IACtB,mBAAoB,UACxB,EAAQ,OAAO,EAAE,SAAS,KAAK,GAAM,KACjC,SAAW,WACX,eAAe,MACf,gBAAgB,SAEpB,EAAK,KAAI,QAAW,EAAE,cAAe,MAAO,aAAc,WAAU,KAAK,OA3BpE,MA6ByB,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAtC,EAAW,cAAc,EAGzB,OAFA,GAAW,sBAEJ","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\r\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\r\n        pivotModule require(\"jquery\")\r\n    else if typeof define is \"function\" and define.amd # AMD\r\n        define [\"jquery\"], pivotModule\r\n    # Plain browser env\r\n    else\r\n        pivotModule jQuery\r\n        \r\ncallWithJQuery ($) ->\r\n\r\n    ###\r\n    Utilities\r\n    ###\r\n\r\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\r\n        nStr += ''\r\n        x = nStr.split('.')\r\n        x1 = x[0]\r\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\r\n        rgx = /(\\d+)(\\d{3})/\r\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\r\n        return x1 + x2\r\n\r\n    numberFormat = (opts) ->\r\n        defaults = \r\n            digitsAfterDecimal: 2, scaler: 1, \r\n            thousandsSep: \",\", decimalSep: \".\"\r\n            prefix: \"\", suffix: \"\"\r\n            showZero: false\r\n        opts = $.extend defaults, opts\r\n        (x) ->\r\n            return \"\" if isNaN(x) or not isFinite(x)\r\n            return \"\" if x == 0 and not opts.showZero\r\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\r\n            return \"\"+opts.prefix+result+opts.suffix\r\n\r\n    #aggregator templates default to US number formatting but this is overrideable\r\n    usFmt = numberFormat()\r\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\r\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\r\n\r\n    aggregatorTemplates =\r\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\r\n            count: 0\r\n            push:  -> @count++\r\n            value: -> @count\r\n            format: formatter\r\n\r\n        countUnique: (formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            uniq: []\r\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\r\n            value: -> @uniq.length\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        listUnique: (sep) -> ([attr]) -> (data, rowKey, colKey)  ->\r\n            uniq: []\r\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\r\n            value: -> @uniq.join sep\r\n            format: (x) -> x\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            sum: 0\r\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\r\n            value: -> @sum\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        mfSum: (formatter=usFmtInt) -> (_arg) -> (data, rowKey, colKey) ->\r\n              _summedFacts = {}\r\n              _i = 0\r\n  \r\n              while _i < _arg.length\r\n                _summedFacts[_arg[_i]] = 0\r\n                _i++\r\n              push: (record) ->\r\n                _i = 0\r\n  \r\n                while _i < _arg.length\r\n                  _summedFacts[_arg[_i]] += parseFloat(record[_arg[_i]]) unless isNaN(parseFloat(record[_arg[_i]]))\r\n                  _i++\r\n                return\r\n  \r\n              multivalue: -> _summedFacts\r\n  \r\n              value: ->\r\n                attr = _arg[0]\r\n                _summedFacts[_arg[0]]\r\n  \r\n              format: formatter\r\n\r\n        average:  (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            sum: 0\r\n            len: 0\r\n            push: (record) ->\r\n                if not isNaN parseFloat(record[attr])\r\n                    @sum += parseFloat(record[attr])\r\n                    @len++\r\n            value: -> @sum/@len\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\r\n            sumNum: 0\r\n            sumDenom: 0\r\n            push: (record) ->\r\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\r\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\r\n            value: -> @sumNum/@sumDenom\r\n            format: formatter\r\n            numInputs: if num? and denom? then 0 else 2\r\n\r\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\r\n            sumNum: 0\r\n            sumDenom: 0\r\n            push: (record) ->\r\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\r\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\r\n            value: ->\r\n                sign = if upper then 1 else -1\r\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\r\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\r\n                    (1 + 1.642374415149816/@sumDenom)\r\n            format: formatter\r\n            numInputs: if num? and denom? then 0 else 2\r\n\r\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\r\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\r\n            inner: wrapped(x...)(data, rowKey, colKey)\r\n            push: (record) -> @inner.push record\r\n            format: formatter\r\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\r\n            numInputs: wrapped(x...)().numInputs\r\n\r\n    #default aggregators & renderers use US naming and number formatting\r\n    aggregators = do (tpl = aggregatorTemplates) -> \r\n        \"Count\":                tpl.count(usFmtInt)\r\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\r\n        \"List Unique Values\":   tpl.listUnique(\", \")\r\n        \"Sum\":                  tpl.sum(usFmt)\r\n        \"MFSum\":                tpl.mfSum(usFmt)\r\n        \"Integer Sum\":          tpl.sum(usFmtInt)\r\n        \"Average\":              tpl.average(usFmt)\r\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\r\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\r\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\r\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\r\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\r\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\r\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\r\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\r\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\r\n\r\n    renderers =\r\n        \"Table\":          (pvtData, opts) ->   pivotTableRenderer(pvtData, opts)\r\n        \"MFTable\":        (pvtData, opts) ->   mfTableRenderer(pvtData, opts)\r\n        \"Table Barchart\": (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).barchart()\r\n        \"Heatmap\":        (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).heatmap()\r\n        \"Row Heatmap\":    (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).heatmap(\"rowheatmap\")\r\n        \"Col Heatmap\":    (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).heatmap(\"colheatmap\")\r\n\r\n    locales = \r\n        en: \r\n            aggregators: aggregators\r\n            renderers: renderers\r\n            localeStrings: \r\n                renderError: \"An error occurred rendering the PivotTable results.\"\r\n                computeError: \"An error occurred computing the PivotTable results.\"\r\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\r\n                selectAll: \"Select All\"\r\n                selectNone: \"Select None\"\r\n                tooMany: \"(too many to list)\"\r\n                filterResults: \"Filter results\"\r\n                totals: \"Totals\" #for table renderer\r\n                vs: \"vs\" #for gchart renderer\r\n                by: \"by\" #for gchart renderer\r\n\r\n    #dateFormat deriver l10n requires month and day names to be passed in directly\r\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\r\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\r\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\r\n\r\n    derivers =\r\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\r\n        dateFormat: (col, formatString, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\r\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\r\n                date = new Date(Date.parse(record[col]))\r\n                if isNaN(date) then return \"\"\r\n                formatString.replace /%(.)/g, (m, p) ->\r\n                    switch p\r\n                        when \"y\" then date.getFullYear()\r\n                        when \"m\" then zeroPad(date.getMonth()+1)\r\n                        when \"n\" then mthNames[date.getMonth()]\r\n                        when \"d\" then zeroPad(date.getDate())\r\n                        when \"w\" then dayNames[date.getDay()]\r\n                        when \"x\" then date.getDay()\r\n                        when \"H\" then zeroPad(date.getHours())\r\n                        when \"M\" then zeroPad(date.getMinutes())\r\n                        when \"S\" then zeroPad(date.getSeconds())\r\n                        else \"%\" + p\r\n\r\n    naturalSort = (as, bs) => #thanks http://stackoverflow.com/a/4373421/112871\r\n        rx = /(\\d+)|(\\D+)/g\r\n        rd = /\\d/\r\n        rz = /^0/\r\n        if typeof as is \"number\" or typeof bs is \"number\"\r\n            return 1  if isNaN(as)\r\n            return -1  if isNaN(bs)\r\n            return as - bs\r\n        a = String(as).toLowerCase()\r\n        b = String(bs).toLowerCase()\r\n        return 0  if a is b\r\n        return (if a > b then 1 else -1)  unless rd.test(a) and rd.test(b)\r\n        a = a.match(rx)\r\n        b = b.match(rx)\r\n        while a.length and b.length\r\n            a1 = a.shift()\r\n            b1 = b.shift()\r\n            if a1 isnt b1\r\n                if rd.test(a1) and rd.test(b1)\r\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\r\n                else\r\n                    return (if a1 > b1 then 1 else -1)\r\n        a.length - b.length\r\n\r\n    #expose these to the outside world\r\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\r\n        naturalSort, numberFormat}\r\n\r\n    ###\r\n    Data Model class\r\n    ###\r\n\r\n    class PivotData\r\n        constructor: (input, opts) ->\r\n            @aggregator = opts.aggregator\r\n            @aggregatorName = opts.aggregatorName\r\n            @colAttrs = opts.cols\r\n            @rowAttrs = opts.rows\r\n            @valAttrs = opts.vals\r\n            @tree = {}\r\n            @rowKeys = []\r\n            @colKeys = []\r\n            @rowTotals = {}\r\n            @colTotals = {}\r\n            @allTotal = @aggregator(this, [], [])\r\n            @sorted = false\r\n\r\n            # iterate through input, accumulating data for cells\r\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) =>\r\n                @processRecord(record) if opts.filter(record)\r\n\r\n        #can handle arrays or jQuery selections of tables\r\n        @forEachRecord = (input, derivedAttributes, f) ->\r\n            if $.isEmptyObject derivedAttributes\r\n                addRecord = f\r\n            else\r\n                addRecord = (record) -> \r\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\r\n                    f(record)\r\n\r\n            #if it's a function, have it call us back\r\n            if $.isFunction(input)\r\n                input(addRecord)\r\n            else if $.isArray(input)\r\n                if $.isArray(input[0]) #array of arrays\r\n                    for own i, compactRecord of input when i > 0\r\n                        record = {}\r\n                        record[k] = compactRecord[j] for own j, k of input[0]\r\n                        addRecord(record)\r\n                else #array of objects\r\n                    addRecord(record) for record in input\r\n            else if input instanceof jQuery\r\n                tblCols = []\r\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\r\n                $(\"tbody > tr\", input).each (i) ->\r\n                    record = {}\r\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).html()\r\n                    addRecord(record)\r\n            else\r\n                throw new Error(\"unknown input format\")\r\n\r\n        #converts to [{attr:val, attr:val},{attr:val, attr:val}] using method above\r\n        @convertToArray = (input) ->\r\n            result = []\r\n            PivotData.forEachRecord input, {}, (record) -> result.push record\r\n            return result\r\n\r\n        natSort: (as, bs) => naturalSort(as, bs)\r\n\r\n        arrSort: (a,b) => @natSort a.join(), b.join()\r\n\r\n        sortKeys: () =>\r\n            if not @sorted\r\n                @rowKeys.sort @arrSort\r\n                @colKeys.sort @arrSort\r\n            @sorted = true\r\n\r\n        getColKeys: () =>\r\n            @sortKeys()\r\n            return @colKeys\r\n\r\n        getRowKeys: () =>\r\n            @sortKeys()\r\n            return @rowKeys\r\n\r\n        processRecord: (record) -> #this code is called in a tight loop\r\n            colKey = []\r\n            rowKey = []\r\n            colKey.push record[x] ? \"null\" for x in @colAttrs \r\n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\r\n            flatRowKey = rowKey.join(String.fromCharCode(0))\r\n            flatColKey = colKey.join(String.fromCharCode(0))\r\n\r\n            @allTotal.push record\r\n\r\n            if rowKey.length != 0\r\n                if not @rowTotals[flatRowKey]\r\n                    @rowKeys.push rowKey\r\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\r\n                @rowTotals[flatRowKey].push record\r\n\r\n            if colKey.length != 0\r\n                if not @colTotals[flatColKey]\r\n                    @colKeys.push colKey\r\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\r\n                @colTotals[flatColKey].push record\r\n\r\n            if colKey.length != 0 and rowKey.length != 0\r\n                if not @tree[flatRowKey]\r\n                    @tree[flatRowKey] = {}\r\n                if not @tree[flatRowKey][flatColKey]\r\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\r\n                @tree[flatRowKey][flatColKey].push record\r\n\r\n        getAggregator: (rowKey, colKey) =>\r\n            flatRowKey = rowKey.join(String.fromCharCode(0))\r\n            flatColKey = colKey.join(String.fromCharCode(0))\r\n            if rowKey.length == 0 and colKey.length == 0\r\n                agg = @allTotal\r\n            else if rowKey.length == 0\r\n                agg = @colTotals[flatColKey]\r\n            else if colKey.length == 0\r\n                agg = @rowTotals[flatRowKey]\r\n            else\r\n                agg = @tree[flatRowKey][flatColKey]\r\n            return agg ? {value: (-> null), format: -> \"\"}\r\n\r\n    ###\r\n    Default Renderer for hierarchical table layout\r\n    ###\r\n\r\n    mfTableRenderer = (pivotData, opts) ->\r\n      aggregator = undefined\r\n      c = undefined\r\n      colAttrs = undefined\r\n      colKey = undefined\r\n      colKeys = undefined\r\n      i = undefined\r\n      j = undefined\r\n      r = undefined\r\n      result = undefined\r\n      rowAttrs = undefined\r\n      rowKey = undefined\r\n      rowKeys = undefined\r\n      th = undefined\r\n      totalAggregator = undefined\r\n      tr = undefined\r\n      txt = undefined\r\n      val = undefined\r\n      x = undefined    \r\n      valAttrs = pivotData.valAttrs\r\n      colAttrs = pivotData.colAttrs\r\n      rowAttrs = pivotData.rowAttrs\r\n      rowKeys = pivotData.getRowKeys()\r\n      colKeys = pivotData.getColKeys()\r\n\r\n      spanSize = (arr, i, j) ->\r\n        len = undefined\r\n        noDraw = undefined\r\n        stop = undefined\r\n        x = undefined\r\n        _i = undefined\r\n        _j = undefined\r\n        if i != 0\r\n          noDraw = true\r\n          x = 0\r\n          if 0 <= j\r\n            _i = 0\r\n            while _i <= j\r\n              x = _i\r\n              if arr[i - 1][x] != arr[i][x]\r\n                noDraw = false\r\n              ++_i\r\n          else\r\n            _i = 0\r\n            while _i >= j\r\n              x = _i\r\n              if arr[i - 1][x] != arr[i][x]\r\n                noDraw = false\r\n              --_i\r\n          if noDraw\r\n            return -1\r\n        len = 0\r\n        while i + len < arr.length\r\n          stop = false\r\n          x = 0\r\n          if 0 <= j\r\n            _j = 0\r\n            while _j <= j\r\n              x = _j\r\n              if arr[i][x] != arr[i + len][x]\r\n                stop = true\r\n              ++_j\r\n          else\r\n            _j = 0\r\n            while _j >= j\r\n              x = _j\r\n              if arr[i][x] != arr[i + len][x]\r\n                stop = true\r\n              --_j\r\n          if stop\r\n            break\r\n          len++\r\n        len\r\n            \r\n\r\n      result = $(\"<table class='table table-bordered pvtTable'>\")\r\n      for j of colAttrs\r\n        c = colAttrs[j]\r\n        tr = $(\"<tr>\")\r\n        tr.append $(\"<th>\").attr(\"colspan\", rowAttrs.length).attr(\"rowspan\", colAttrs.length)  if parseInt(j) is 0 and rowAttrs.length isnt 0\r\n        tr.append $(\"<th class='pvtAxisLabel'>\").text(c)\r\n        tmpAggregator = pivotData.getAggregator([], [])\r\n        if tmpAggregator.multivalue\r\n          col_colspan = Object.keys(tmpAggregator.multivalue()).length\r\n          col_rowspan = 1\r\n        else\r\n          col_colspan = 1\r\n          col_rowspan = 2\r\n        for i of colKeys\r\n          colKey = colKeys[i]\r\n          th = $(\"<th class='pvtColLabel'>\").text(colKey[j]).attr(\"colspan\", col_colspan)\r\n          th.attr \"rowspan\", col_rowspan  if parseInt(j) is colAttrs.length - 1 and rowAttrs.length isnt 0\r\n          tr.append th\r\n        tr.append $(\"<th class='pvtTotalLabel'>\").text(\"TOTALS\").attr(\"colspan\", col_colspan).attr(\"rowspan\", colAttrs.length)  if parseInt(j) is 0\r\n        result.append tr\r\n      if rowAttrs.length isnt 0\r\n        tr = $(\"<tr>\")\r\n        for i of rowAttrs\r\n          r = rowAttrs[i]\r\n          tr.append $(\"<th class='pvtAxisLabel'>\").text(r)\r\n        tmpAggregator = pivotData.getAggregator([], [])\r\n        if tmpAggregator.multivalue\r\n          if colAttrs.length > 0\r\n            th = $(\"<th>\")\r\n            tr.append th\r\n          val = tmpAggregator.multivalue()\r\n          for i of colKeys\r\n            for v of val\r\n              tr.append $(\"<th class='pvtColLabel'>\").text(v).data(\"value\", v)\r\n          for v of val\r\n            tr.append $(\"<th class='pvtColLabel'>\").text(v).data(\"value\", v)\r\n        else\r\n          th = $(\"<th>\")\r\n          th.addClass(\"pvtTotalLabel\").text \"TOTALS\"  if colAttrs.length is 0\r\n          tr.append th\r\n        result.append tr\r\n      for i of rowKeys\r\n        rowKey = rowKeys[i]\r\n        tr = $(\"<tr>\")\r\n        for j of rowKey\r\n          txt = rowKey[j]\r\n          ###th = $(\"<th class='pvtRowLabel'>\").text(txt).attr(\"rowspan\", x)\r\n          th.attr \"colspan\", 2  if parseInt(j) is rowAttrs.length - 1 and colAttrs.length isnt 0\r\n          tr.append th###\r\n          colspan = 1\r\n          if j == 1\r\n            colspan = rowAttrs.length\r\n          else\r\n            if colAttrs.length > 0\r\n              colspan = 1\r\n          rowspan = spanSize(rowKeys, parseInt(i), parseInt(j))\r\n          if rowspan != -1\r\n            th = $('<th class=\\'pvtRowLabel\\'>').text(txt).attr('rowspan', rowspan).attr('colspan', colspan)\r\n            tr.append th\r\n        for j of colKeys\r\n          colKey = colKeys[j]\r\n          aggregator = pivotData.getAggregator(rowKey, colKey)\r\n          if aggregator.multivalue\r\n            val = aggregator.multivalue()\r\n            for v of val\r\n              tr.append $(\"<td class='pvtVal row\" + i + \" col\" + j+\"-\" + v + \"'>\").text(aggregator.format(val[v])).data(\"value\", val[v])\r\n          else\r\n            val = aggregator.value()\r\n            # tr.append $(\"<td class='pvtVal row\" + i + \" col\" + j + \"'>\").text(aggregator.format(val)).data(\"value\", val)\r\n            if val\r\n              tr.append $(\"<td class='pvtVal row\" + i + \" col\" + j + \"'>\").text(aggregator.format(val)).data('value', val)\r\n            else\r\n              tmpAggregator = pivotData.getAggregator([], [])\r\n              cols_length = 1\r\n              if tmpAggregator.multivalue\r\n                cols_length = Object.keys(tmpAggregator.multivalue()).length\r\n              cl = 0\r\n              while cl < cols_length\r\n                tr.append $(\"<td class='pvtVal row\" + i + \" col\" + j + \"-\" + cl + \"'>\").text('').data('value', null)\r\n                cl++    \r\n        totalAggregator = pivotData.getAggregator(rowKey, [])\r\n        if totalAggregator.multivalue\r\n          val = totalAggregator.multivalue()\r\n          for v of val\r\n            #tr.append $(\"<td class='pvtTotal rowTotal'>\").text(totalAggregator.format(val[v])).data(\"value\", val[v]).data(\"for\", \"row\" + i)\r\n            tr.append \"<td class='pvtTotal rowTotal'>\" + totalAggregator.format(val[v]) + \"</td>\"\r\n        else\r\n          val = totalAggregator.value()\r\n          tr.append $(\"<td class='pvtTotal rowTotal'>\").text(totalAggregator.format(val)).data(\"value\", val).data(\"for\", \"row\" + i)\r\n        result.append tr\r\n      tr = $(\"<tr>\")\r\n      th = $(\"<th class='pvtTotalLabel'>\").text(\"TOTALS\")\r\n      th.attr \"colspan\", rowAttrs.length + ((if colAttrs.length is 0 then 0 else 1))\r\n      tr.append th\r\n      for j of colKeys\r\n        console.log \"local_debug[3]\"\r\n        colKey = colKeys[j]\r\n        totalAggregator = pivotData.getAggregator([], colKey)\r\n        if totalAggregator.multivalue\r\n          val = totalAggregator.multivalue()\r\n          for v of val\r\n            tr.append $(\"<td class='pvtTotal colTotal'>\").text(totalAggregator.format(val[v])).data(\"value\", val[v]).data(\"for\", \"col\" + j)\r\n        else\r\n          val = totalAggregator.value()\r\n          tr.append $(\"<td class='pvtTotal colTotal'>\").text(totalAggregator.format(val)).data(\"value\", val).data(\"for\", \"col\" + j)\r\n      totalAggregator = pivotData.getAggregator([], [])\r\n      if totalAggregator.multivalue\r\n        val = totalAggregator.multivalue()\r\n        for v of val\r\n          _d = val[v]\r\n          html = \"<td class='pvtGrandTotal'>\" + _d + \"</td>\"\r\n          tr.append html\r\n      else\r\n        val = totalAggregator.value()\r\n        html = $(\"<td class='pvtGrandTotal'>\").text(totalAggregator.format(val)).data(\"value\", val)\r\n        tr.append html\r\n      result.append tr\r\n      result.data \"dimensions\", [\r\n        rowKeys.length\r\n        colKeys.length\r\n      ]\r\n      result\r\n\r\n    pivotTableRenderer = (pivotData, opts) ->\r\n\r\n        defaults =\r\n            localeStrings:\r\n                totals: \"Totals\"\r\n\r\n        opts = $.extend defaults, opts\r\n\r\n        colAttrs = pivotData.colAttrs\r\n        rowAttrs = pivotData.rowAttrs\r\n        rowKeys = pivotData.getRowKeys()\r\n        colKeys = pivotData.getColKeys()\r\n\r\n        #now actually build the output\r\n        result = document.createElement(\"table\")\r\n        result.className = \"pvtTable\"\r\n\r\n        #helper function for setting row/col-span in pivotTableRenderer\r\n        spanSize = (arr, i, j) ->\r\n            if i != 0\r\n                noDraw = true\r\n                for x in [0..j]\r\n                    if arr[i-1][x] != arr[i][x]\r\n                        noDraw = false\r\n                if noDraw\r\n                  return -1 #do not draw cell\r\n            len = 0\r\n            while i+len < arr.length\r\n                stop = false\r\n                for x in [0..j]\r\n                    stop = true if arr[i][x] != arr[i+len][x]\r\n                break if stop\r\n                len++\r\n            return len\r\n\r\n        #the first few rows are for col headers\r\n        for own j, c of colAttrs\r\n            tr = document.createElement(\"tr\")\r\n            if parseInt(j) == 0 and rowAttrs.length != 0\r\n                th = document.createElement(\"th\")\r\n                th.setAttribute(\"colspan\", rowAttrs.length)\r\n                th.setAttribute(\"rowspan\", colAttrs.length)\r\n                tr.appendChild th\r\n            th = document.createElement(\"th\")\r\n            th.className = \"pvtAxisLabel\"\r\n            th.innerHTML = c\r\n            tr.appendChild th\r\n            for own i, colKey of colKeys\r\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\r\n                if x != -1\r\n                    th = document.createElement(\"th\")\r\n                    th.className = \"pvtColLabel\"\r\n                    th.innerHTML = colKey[j]\r\n                    th.setAttribute(\"colspan\", x)\r\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\r\n                        th.setAttribute(\"rowspan\", 2)\r\n                    tr.appendChild th\r\n            if parseInt(j) == 0\r\n                th = document.createElement(\"th\")\r\n                th.className = \"pvtTotalLabel\"\r\n                th.innerHTML = opts.localeStrings.totals\r\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\r\n                tr.appendChild th\r\n            result.appendChild tr\r\n\r\n        #then a row for row header headers\r\n        if rowAttrs.length !=0\r\n            tr = document.createElement(\"tr\")\r\n            for own i, r of rowAttrs\r\n                th = document.createElement(\"th\")\r\n                th.className = \"pvtAxisLabel\"\r\n                th.innerHTML = r\r\n                tr.appendChild th \r\n            th = document.createElement(\"th\")\r\n            if colAttrs.length ==0\r\n                th.className = \"pvtTotalLabel\"\r\n                th.innerHTML = opts.localeStrings.totals\r\n            tr.appendChild th\r\n            result.appendChild tr\r\n\r\n        #now the actual data rows, with their row headers and totals\r\n        for own i, rowKey of rowKeys\r\n            tr = document.createElement(\"tr\")\r\n            for own j, txt of rowKey\r\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\r\n                if x != -1\r\n                    th = document.createElement(\"th\")\r\n                    th.className = \"pvtRowLabel\"\r\n                    th.innerHTML = txt\r\n                    th.setAttribute(\"rowspan\", x)\r\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\r\n                        th.setAttribute(\"colspan\",2)\r\n                    tr.appendChild th\r\n            for own j, colKey of colKeys #this is the tight loop\r\n                aggregator = pivotData.getAggregator(rowKey, colKey)\r\n                val = aggregator.value()\r\n                td = document.createElement(\"td\")\r\n                td.className = \"pvtVal row#{i} col#{j}\"\r\n                td.innerHTML = aggregator.format(val)\r\n                td.setAttribute(\"data-value\", val)\r\n                tr.appendChild td\r\n\r\n            totalAggregator = pivotData.getAggregator(rowKey, [])\r\n            val = totalAggregator.value()\r\n            td = document.createElement(\"td\")\r\n            td.className = \"pvtTotal rowTotal\"\r\n            td.innerHTML = totalAggregator.format(val)\r\n            td.setAttribute(\"data-value\", val)\r\n            td.setAttribute(\"data-for\", \"row\"+i)\r\n            tr.appendChild td\r\n            result.appendChild tr\r\n\r\n        #finally, the row for col totals, and a grand total\r\n        tr = document.createElement(\"tr\")\r\n        th = document.createElement(\"th\")\r\n        th.className = \"pvtTotalLabel\"\r\n        th.innerHTML = opts.localeStrings.totals\r\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\r\n        tr.appendChild th\r\n        for own j, colKey of colKeys\r\n            totalAggregator = pivotData.getAggregator([], colKey)\r\n            val = totalAggregator.value()\r\n            td = document.createElement(\"td\")\r\n            td.className = \"pvtTotal colTotal\"\r\n            td.innerHTML = totalAggregator.format(val)\r\n            td.setAttribute(\"data-value\", val)\r\n            td.setAttribute(\"data-for\", \"col\"+j)\r\n            tr.appendChild td\r\n        totalAggregator = pivotData.getAggregator([], [])\r\n        val = totalAggregator.value()\r\n        td = document.createElement(\"td\")\r\n        td.className = \"pvtGrandTotal\"\r\n        td.innerHTML = totalAggregator.format(val)\r\n        td.setAttribute(\"data-value\", val)\r\n        tr.appendChild td\r\n        result.appendChild tr\r\n\r\n        #squirrel this away for later\r\n        result.setAttribute(\"data-numrows\", rowKeys.length)\r\n        result.setAttribute(\"data-numcols\", colKeys.length)\r\n\r\n        return result\r\n\r\n    ###\r\n    Pivot Table core: create PivotData object and call Renderer on it\r\n    ###\r\n\r\n    $.fn.pivot = (input, opts) ->\r\n        defaults =\r\n            cols : []\r\n            rows: []\r\n            filter: -> true\r\n            aggregator: aggregatorTemplates.count()()\r\n            aggregatorName: \"Count\"\r\n            derivedAttributes: {},\r\n            renderer: pivotTableRenderer\r\n            rendererOptions: null\r\n            localeStrings: locales.en.localeStrings\r\n\r\n        opts = $.extend defaults, opts\r\n\r\n        result = null\r\n        try\r\n            pivotData = new PivotData(input, opts)\r\n            try\r\n                result = opts.renderer(pivotData, opts.rendererOptions)\r\n            catch e\r\n                console.error(e.stack) if console?\r\n                result = $(\"<span>\").html opts.localeStrings.renderError\r\n        catch e\r\n            console.error(e.stack) if console?\r\n            result = $(\"<span>\").html opts.localeStrings.computeError\r\n        \r\n        x = this[0]\r\n        x.removeChild(x.lastChild) while x.hasChildNodes()\r\n        return @append result\r\n\r\n\r\n    ###\r\n    Pivot Table UI: calls Pivot Table core above with options set by user\r\n    ###\r\n\r\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\r\n        valSel = undefined\r\n        valOrg = undefined\r\n        defaults =\r\n            derivedAttributes: {}\r\n            aggregators: locales[locale].aggregators\r\n            renderers: locales[locale].renderers\r\n            hiddenAttributes: []\r\n            menuLimit: 2000\r\n            cols: [], rows: [], vals: []\r\n            exclusions: {}\r\n            unusedAttrsVertical: \"auto\"\r\n            autoSortUnusedAttrs: false\r\n            rendererOptions: localeStrings: locales[locale].localeStrings\r\n            onRefresh: null\r\n            filter: -> true\r\n            localeStrings: locales[locale].localeStrings\r\n\r\n        existingOpts = @data \"pivotUIOptions\"\r\n        if not existingOpts? or overwrite\r\n            opts = $.extend defaults, inputOpts\r\n        else\r\n            opts = existingOpts\r\n\r\n        try\r\n            #cache the input in some useful form\r\n            input = PivotData.convertToArray(input)\r\n            tblCols = (k for own k of input[0])\r\n            tblCols.push c for own c of opts.derivedAttributes when (c not in tblCols)\r\n\r\n            #figure out the cardinality and some stats\r\n            axisValues = {}\r\n            axisValues[x] = {} for x in tblCols\r\n\r\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\r\n                for own k, v of record when opts.filter(record)\r\n                    v ?= \"null\"\r\n                    axisValues[k][v] ?= 0\r\n                    axisValues[k][v]++\r\n\r\n            #start building the output\r\n            uiTable = $(\"<table>\").attr(\"cellpadding\", 5)\r\n\r\n            #renderer control\r\n            rendererControl = $(\"<td>\")\r\n\r\n            renderer = $(\"<select>\")\r\n                .addClass('pvtRenderer')\r\n                .appendTo(rendererControl)\r\n                .bind \"change\", -> refresh() #capture reference\r\n            for own x of opts.renderers\r\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\r\n\r\n\r\n            #axis list, including the double-click menu\r\n            colList = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\r\n            shownAttributes = (c for c in tblCols when c not in opts.hiddenAttributes)\r\n\r\n            unusedAttrsVerticalAutoOverride = false\r\n            if opts.unusedAttrsVertical == \"auto\"\r\n                attrLength = 0\r\n                attrLength += a.length for a in shownAttributes\r\n                unusedAttrsVerticalAutoOverride = attrLength > 120\r\n\r\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\r\n                colList.addClass('pvtVertList')\r\n            else\r\n                colList.addClass('pvtHorizList')\r\n\r\n            for i, c of shownAttributes\r\n                do (c) ->\r\n                    keys = (k for k of axisValues[c])\r\n                    hasExcludedItem = false\r\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\r\n\r\n                    valueList.append $(\"<h4>\").text(\"#{c} (#{keys.length})\")\r\n                    if keys.length > opts.menuLimit\r\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\r\n                    else\r\n                        btns = $(\"<p>\").appendTo(valueList)\r\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectAll).bind \"click\", ->\r\n                            valueList.find(\"input:visible\").prop \"checked\", true\r\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectNone).bind \"click\", ->\r\n                            valueList.find(\"input:visible\").prop \"checked\", false\r\n                        btns.append $(\"<input>\", {type: \"text\", placeholder: opts.localeStrings.filterResults, class: \"pvtSearch\"}).bind \"keyup\", ->\r\n                            filter = $(this).val().toLowerCase()\r\n                            valueList.find('.pvtCheckContainer p').each ->\r\n                                testString = $(this).text().toLowerCase().indexOf(filter)\r\n                                if testString isnt -1\r\n                                    $(this).show()\r\n                                else\r\n                                    $(this).hide()\r\n\r\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\r\n\r\n                        for k in keys.sort(naturalSort)\r\n                             v = axisValues[c][k]\r\n                             filterItem = $(\"<label>\")\r\n                             filterItemExcluded = if opts.exclusions[c] then (k in opts.exclusions[c]) else false\r\n                             hasExcludedItem ||= filterItemExcluded\r\n                             $(\"<input>\")\r\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\r\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [c,k])\r\n                                .appendTo filterItem\r\n                             filterItem.append $(\"<span>\").html k\r\n                             filterItem.append $(\"<span>\").text \" (\"+v+\")\"\r\n                             checkContainer.append $(\"<p>\").append(filterItem)\r\n\r\n                    updateFilter = ->\r\n                        unselectedCount = valueList.find(\"[type='checkbox']\").length -\r\n                                          valueList.find(\"[type='checkbox']:checked\").length\r\n                        if unselectedCount > 0\r\n                            attrElem.addClass \"pvtFilteredAttribute\"\r\n                        else\r\n                            attrElem.removeClass \"pvtFilteredAttribute\"\r\n                        if keys.length > opts.menuLimit\r\n                            valueList.toggle()\r\n                        else\r\n                            valueList.toggle(0, refresh)\r\n\r\n                    $(\"<p>\").appendTo(valueList)\r\n                        .append $(\"<button>\", {type:\"button\"}).text(\"OK\").bind \"click\", updateFilter\r\n\r\n                    showFilterList = (e) ->\r\n                        valueList.css(left: e.pageX, top: e.pageY).toggle()\r\n                        valueList.find('.pvtSearch').val('')\r\n                        valueList.find('.pvtCheckContainer p').show()\r\n\r\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\")\r\n                        .bind \"click\", showFilterList\r\n\r\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\r\n                        .append $(\"<span>\").addClass('pvtAttr').text(c).data(\"attrName\", c).append(triangleLink)\r\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\r\n                    colList.append(attrElem).append(valueList)\r\n\r\n                    attrElem.bind \"dblclick\", showFilterList\r\n\r\n            tr1 = $(\"<tr>\").appendTo(uiTable)\r\n\r\n            #aggregator menu and value area\r\n\r\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\r\n                .bind \"change\", -> refresh() #capture reference\r\n            for own x of opts.aggregators\r\n                aggregator.append $(\"<option>\").val(x).html(x)\r\n\r\n            $(\"<td>\").addClass('pvtVals')\r\n              .appendTo(tr1)\r\n              .append(aggregator)\r\n              .append($(\"<br>\"))\r\n\r\n            #column axes\r\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\r\n\r\n            tr2 = $(\"<tr>\").appendTo(uiTable)\r\n\r\n            #row axes\r\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\r\n\r\n            #the actual pivot table container\r\n            pivotTable = $(\"<td>\")\r\n                .attr(\"valign\", \"top\")\r\n                .addClass('pvtRendererArea')\r\n                .appendTo(tr2)\r\n\r\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\r\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\r\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\r\n                uiTable.find('tr:nth-child(2)').prepend colList\r\n            else\r\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(colList)\r\n\r\n            #render the UI in its default state\r\n            @html uiTable\r\n\r\n            #set up the UI initial state as requested by moving elements around\r\n\r\n            for x in opts.cols\r\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\r\n            for x in opts.rows\r\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\r\n            if opts.aggregatorName?\r\n                @find(\".pvtAggregator\").val opts.aggregatorName\r\n            if opts.rendererName?\r\n                @find(\".pvtRenderer\").val opts.rendererName\r\n\r\n            initialRender = true\r\n            valSel = []\r\n            valOrg = []\r\n            #set up for refreshing\r\n            refreshDelayed = =>\r\n                subopts =\r\n                    derivedAttributes: opts.derivedAttributes\r\n                    localeStrings: opts.localeStrings\r\n                    rendererOptions: opts.rendererOptions\r\n                    cols: [], rows: []\r\n\r\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\r\n                vals = []\r\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\r\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\r\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\r\n                    if numInputsToProcess == 0\r\n                        $(this).remove()\r\n                    else\r\n                        numInputsToProcess--\r\n                        vals.push $(this).val() if $(this).val() != \"\"\r\n\r\n                if numInputsToProcess != 0\r\n                    pvtVals = @find(\".pvtVals\")\r\n                    for x in [0...numInputsToProcess]\r\n                        newDropdown = $(\"<select>\")\r\n                            .addClass('pvtAttrDropdown')\r\n                            .append($(\"<option>\"))\r\n                            .bind \"change\", -> refresh()\r\n                        for attr in shownAttributes\r\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\r\n                        pvtVals.append(newDropdown)\r\n\r\n                vals = undefined\r\n                if opts.aggregatorName != null and opts.aggregatorName == 'MFSum'\r\n                  if initialRender\r\n                    valSel = opts.vals\r\n                    valOrg = opts.vals\r\n                  else\r\n                    opts.vals = valOrg\r\n                  vals = valSel\r\n                  pvtVals = _this.find('.pvtVals')\r\n                  newDropdown = $('<select>').addClass('pvtAttrDropdown').attr('multiple', true).bind('change', ->\r\n                    valSel = $(this).val()\r\n                    refresh()\r\n                  )\r\n                  for v of opts.vals\r\n                    attr = opts.vals[v]\r\n                    x = false\r\n                    if valSel.indexOf(attr) != -1\r\n                      x = true\r\n                    newDropdown.append $('<option>').val(attr).text(attr).prop('selected', x)\r\n                  pvtVals.append newDropdown\r\n\r\n                if initialRender\r\n                    i = 0\r\n                    if opts.aggregatorName != 'MFSum'\r\n                        @find(\".pvtVals select.pvtAttrDropdown\").each ->\r\n                            $(this).val vals[i]\r\n                            i++\r\n                    initialRender = false\r\n\r\n                subopts.aggregatorName = aggregator.val()\r\n                subopts.vals = vals\r\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\r\n                subopts.renderer = opts.renderers[renderer.val()]\r\n\r\n                #construct filter here\r\n                exclusions = {}\r\n                @find('input.pvtFilter').not(':checked').each ->\r\n                    filter = $(this).data(\"filter\")\r\n                    if exclusions[filter[0]]?\r\n                        exclusions[filter[0]].push( filter[1] )\r\n                    else\r\n                        exclusions[filter[0]] = [ filter[1] ]\r\n\r\n                subopts.filter = (record) ->\r\n                    return false if not opts.filter(record)\r\n                    for k,excludedItems of exclusions\r\n                        return false if \"\"+record[k] in excludedItems\r\n                    return true\r\n\r\n                pivotTable.pivot(input,subopts)\r\n                pivotUIOptions = $.extend opts,\r\n                    cols: subopts.cols\r\n                    rows: subopts.rows\r\n                    vals: vals\r\n                    exclusions: exclusions\r\n                    aggregatorName: aggregator.val()\r\n                    rendererName: renderer.val()\r\n\r\n                @data \"pivotUIOptions\", pivotUIOptions\r\n\r\n                # if requested make sure unused columns are in alphabetical order\r\n                if opts.autoSortUnusedAttrs\r\n                    natSort = $.pivotUtilities.naturalSort\r\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\r\n                    $(unusedAttrsContainer).children(\"li\")\r\n                        .sort((a, b) => natSort($(a).text(), $(b).text()))\r\n                        .appendTo unusedAttrsContainer\r\n\r\n                pivotTable.css(\"opacity\", 1)\r\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\r\n\r\n            refresh = =>\r\n                pivotTable.css(\"opacity\", 0.5)\r\n                setTimeout refreshDelayed, 10\r\n\r\n            #the very first refresh will actually display the table\r\n            refresh()\r\n\r\n            @find(\".pvtAxisContainer\").sortable\r\n                    update: (e, ui) -> refresh() if not ui.sender?\r\n                    connectWith: @find(\".pvtAxisContainer\")\r\n                    items: 'li'\r\n                    placeholder: 'pvtPlaceholder'\r\n        catch e\r\n            console.error(e.stack) if console?\r\n            @html opts.localeStrings.uiRenderError\r\n        return this\r\n\r\n    ###\r\n    Heatmap post-processing\r\n    ###\r\n\r\n    $.fn.heatmap = (scope = \"heatmap\") ->\r\n        numRows = @data \"numrows\"\r\n        numCols = @data \"numcols\"\r\n\r\n        colorGen = (color, min, max) ->\r\n            hexGen = switch color\r\n                when \"red\"   then (hex) -> \"ff#{hex}#{hex}\"\r\n                when \"green\" then (hex) -> \"#{hex}ff#{hex}\"\r\n                when \"blue\"  then (hex) -> \"#{hex}#{hex}ff\"\r\n\r\n            return (x) ->\r\n                intensity = 255 - Math.round 255*(x-min)/(max-min)\r\n                hex = intensity.toString(16).split(\".\")[0]\r\n                hex = 0+hex if hex.length == 1\r\n                return hexGen(hex)\r\n\r\n        heatmapper = (scope, color) =>\r\n            forEachCell = (f) =>\r\n                @find(scope).each ->\r\n                    x = $(this).data(\"value\")\r\n                    f(x, $(this)) if x? and isFinite(x)\r\n\r\n            values = []\r\n            forEachCell (x) -> values.push x\r\n            colorFor = colorGen color, Math.min(values...), Math.max(values...)\r\n            forEachCell (x, elem) -> elem.css \"background-color\", \"#\" + colorFor(x)\r\n\r\n        switch scope\r\n            when \"heatmap\"\r\n                heatmapper \".pvtVal\", \"red\"\r\n            when \"rowheatmap\"\r\n                heatmapper \".pvtVal.row#{i}\", \"red\" for i in [0...numRows]\r\n            when \"colheatmap\"\r\n                heatmapper \".pvtVal.col#{j}\", \"red\" for j in [0...numCols]\r\n\r\n        heatmapper \".pvtTotal.rowTotal\", \"red\"\r\n        heatmapper \".pvtTotal.colTotal\", \"red\"\r\n\r\n        return this\r\n\r\n    ###\r\n    Barchart post-processing\r\n    ###\r\n\r\n    $.fn.barchart =  ->\r\n        numRows = @data \"numrows\"\r\n        numCols = @data \"numcols\"\r\n\r\n        barcharter = (scope) =>\r\n            forEachCell = (f) =>\r\n                @find(scope).each ->\r\n                    x = $(this).data(\"value\")\r\n                    f(x, $(this)) if x? and isFinite(x)\r\n\r\n            values = []\r\n            forEachCell (x) -> values.push x\r\n            max = Math.max(values...)\r\n            scaler = (x) -> 100*x/(1.4*max)\r\n            forEachCell (x, elem) ->\r\n                text = elem.text()\r\n                wrapper = $(\"<div>\").css\r\n                    \"position\": \"relative\"\r\n                    \"height\": \"55px\"\r\n                wrapper.append $(\"<div>\").css\r\n                    \"position\": \"absolute\"\r\n                    \"bottom\": 0\r\n                    \"left\": 0\r\n                    \"right\": 0\r\n                    \"height\": scaler(x) + \"%\"\r\n                    \"background-color\": \"gray\"\r\n                wrapper.append $(\"<div>\").text(text).css\r\n                    \"position\":\"relative\"\r\n                    \"padding-left\":\"5px\"\r\n                    \"padding-right\":\"5px\"\r\n\r\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\r\n\r\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\r\n        barcharter \".pvtTotal.colTotal\"\r\n\r\n        return this"],"sourceRoot":"/source/"}